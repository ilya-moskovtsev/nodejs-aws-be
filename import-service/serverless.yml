# NOTE: update this with your service name
service: import-service

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs12.x
  profile: iam_admin_user
  stage: dev
  region: ${env:REGION}
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #
  environment:
    SQS_URL: ${self:custom.SQS_URL}

  iamRoleStatements:
    - Effect: "Allow"
      Action: "s3:ListBucket"
      Resource:
        - "arn:aws:s3:::ilymos-task-5"
    - Effect: "Allow"
      Action: "s3:*"
      Resource:
        - "arn:aws:s3:::ilymos-task-5/*"
    - Effect: 'Allow'
      Action: 'sqs:*'
      Resource: ${self:custom.SQS_ARN}

resources:
  Resources:
    SQS:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: catalogBatchProcess
        ReceiveMessageWaitTimeSeconds: 20
    GatewayResponseDenied:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Credentials: "'true'"
        ResponseType: ACCESS_DENIED
        RestApiId: !Ref ApiGatewayRestApi
    GatewayResponseUnauthorized:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Credentials: "'true'"
        ResponseType: UNAUTHORIZED
        RestApiId: !Ref ApiGatewayRestApi
  Outputs:
    sqsArn:
      Value: ${self:custom.SQS_ARN}

functions:
  importProductsFile:
    handler: handler.importProductsFile
    events:
      - http:
          path: import
          method: get
          request:
            parameters:
              querystrings:
                name: true
          cors: true
          authorizer:
            name: basicAuthorizer
            arn: ${self:custom.AUTH_ARN}
            resultTtlInSeconds: 0
            identifySource: method.request.header.Authorization
            type: token
  importFileParser:
    handler: handler.importFileParser
    events:
      - s3:
          bucket: ilymos-task-5
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploaded/
          existing: true

custom:
  bundle:
    linting: false
  SQS_URL:
    Ref: SQS
  SQS_ARN:
    Fn::GetAtt:
      - SQS
      - Arn
  AUTH_ARN: ${cf:authorization-service-${self:provider.stage}.authArn}